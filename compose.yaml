# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker compose reference guide at
# https://docs.docker.com/compose/compose-file/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose
# ORIGINAL config
# services:
#   server:
#     build:
#       context: .
#     environment:
#       NODE_ENV: production
#     ports:
#       - 3030:3030

# our custom config
services:
  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_ROOT_PASSWORD: 123123
      MYSQL_DATABASE: devcode-db
    ports:
      - 3306:3306
    volumes:
      - todolist-mysql-data:/var/lib/mysql
      - todolist-mysql-config:/etc/mysql

  app:
    build:
      context: .
      dockerfile: Dockerfile
    restart: unless-stopped
    environment:
      MYSQL_DBNAME: devcode-db
      MYSQL_USER: root
      MYSQL_PASSWORD: 123123
      MYSQL_HOST: db
    volumes:
      - ./:/todolist
    ports:
      - "3030:3030"
    depends_on:
      - db

volumes:
  todolist-mysql-data:
  todolist-mysql-config:
# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

